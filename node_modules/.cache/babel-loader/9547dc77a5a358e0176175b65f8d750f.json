{"ast":null,"code":"var _jsxFileName = \"/Users/TravelComputer/Desktop/node_sandbox/reactapp/node_modules/react-komponent/src/components/component.jsx\";\nimport React from 'react';\nimport { store } from './componentFunction';\nimport { combined as combinedReducers } from '../reducers/index';\nimport { combineReducers } from 'redux';\nimport { useSelector } from 'react-redux';\nimport { connect } from 'react-redux';\nlet combined = combinedReducers;\n\nfunction lowerFirst(word) {\n  console.log('word!', word);\n  return word.charAt(0).toLowerCase() + word.slice(1);\n}\n\nlet previous = [];\nexport default class Component extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(\"in the constructor!!!!!!!!!!!!!!\", this.constructor.name);\n    let reducers = combined;\n    const dispatch = store.dispatch;\n    const componentName = this.constructor.name;\n    this.componentName = lowerFirst(componentName);\n    this.originalSetState = this.setState;\n    this.initialized = false;\n    this.originalComponentDidMount = this.componentDidMount;\n    const thiss = this;\n    let component = this.props.component;\n    const stateFromStorage = Component.stateFromStorage;\n\n    const getState = () => store.getState();\n\n    if (props.st) {\n      console.log('propsST', props.st);\n    }\n\n    this.actions = {\n      setState: (payload, comp = this.componentName) => {\n        const type = comp.toUpperCase() + '_STATE_CHANGE';\n        return {\n          type: type,\n          payload\n        };\n      },\n      fetchData: (endpoint, name = 'fetchedData', callback, comp = thiss.componentName) => {\n        return dispatch => {\n          dispatch(thiss.actions.fetchDataStart(comp));\n          console.log('endpoint', endpoint);\n          fetch(endpoint).then(response => response.json()).then(json => {\n            console.log('JSON:', json);\n            dispatch(thiss.actions.fetchDataComplete(json, callback, name));\n          }).catch(error => console.log(error));\n        };\n      },\n      fetchDataStart: (comp = thiss.componentName) => {\n        return {\n          type: comp.toUpperCase() + '_FETCH_DATA_START'\n        };\n      },\n      fetchDataComplete: (data, callback = null, name = 'fetchedData', comp = thiss.componentName) => {\n        return {\n          type: comp.toUpperCase() + '_FETCH_DATA_COMPLETE',\n          payload: {\n            [name]: data,\n            callback\n          }\n        };\n      }\n    };\n    if (!Component.customReducers) Component.reducers[this.componentName] = this.reducer;\n    if (thiss.state && !Component.statefulComponents[thiss.componentName]) Component.statefulComponents[thiss.componentName] = thiss;\n    let fromLocal = stateFromStorage();\n    let fromStore = getState();\n    let untracked = {};\n    let replenish = {};\n    Object.keys(fromLocal).forEach(key => {\n      if (!fromStore[key]) replenish[key] = fromLocal[key];\n\n      if (!fromStore[key] && !Component.reducers[key]) {\n        console.log('got one', key, fromLocal[key]);\n\n        untracked[key] = (state = null, action) => {\n          switch (action.type) {\n            case key.toUpperCase() + '_STATE_CHANGE':\n              return action.payload;\n\n            default:\n              return state;\n          }\n        };\n      }\n    });\n\n    if (Object.keys(untracked).length > 1) {\n      console.log('untracked!', untracked);\n      combined = { ...combined,\n        ...untracked\n      };\n      store.replaceReducer(combineReducers({ ...combined,\n        ...Component.reducers\n      }));\n      console.log('store from untracked:', store.getState());\n    }\n\n    Object.keys(replenish).forEach(key => {\n      this.useDispatch(this.actions.setState(stateFromStorage()[key], key));\n    });\n\n    this.setState = function (...args) {\n      let cb = () => {};\n\n      if (arguments.length === 2 && typeof arguments[1] === 'function') {\n        cb = args.pop();\n      } // console.log('before',getState())\n\n\n      thiss.originalSetState(arguments[0], st => {\n        cb(st);\n        thiss.suppressSetState = false;\n        console.log('doing the thing!!!!');\n        this.useDispatch(thiss.actions.setState(arguments[0])); // console.log('New State from setState',getState())\n\n        console.log('New State from setState', thiss.state);\n      });\n    };\n\n    this.componentWillMount = (...args) => {\n      console.log('------------- component WILL mount!!!! -------------');\n\n      if (!thiss.initialized && thiss.state && Object.keys(thiss.state).length > 1) {\n        const storeState = getState()[thiss.componentName] || {};\n        const fetchedState = Object.keys(storeState).length < 1 ? thiss.state : storeState;\n\n        if (JSON.stringify(thiss.state) !== JSON.stringify(storeState)) {\n          thiss.setState(fetchedState);\n        }\n      }\n\n      thiss.initialized = true;\n      if (thiss.originalComponentDidMount) thiss.originalComponentDidMount(...args);\n    };\n\n    if (!reducers[thiss.componentName] && Component.reducers[thiss.componentName]) Component.registerReducers();\n  }\n\n  useSelector(cb) {\n    const theState = store.getState();\n    const thiss = this;\n    const select = cb;\n    const us = this.useSelector;\n    const theSelected = select(theState);\n    if (!us.subscriptions) us.subscriptions = new WeakMap();\n\n    if (us.subscriptions.has(select)) {\n      return theSelected;\n    }\n\n    if (theState === theSelected || theSelected === theState[this.componentName]) return theSelected; // return theState\n\n    store.subscribe(state => {\n      let newStore = store.getState();\n      let newSelected = select(newStore); // console.log('NEWSTORE FROM SUBSCRIBE',newStore)\n\n      let oldState = newSelected;\n      if (us.subscriptions.has(select)) oldState = us.subscriptions.get(select); // console.log(\"NEW STATE from Subscribe\",newSelected); console.log(\"OLD STATE from Subscribe\",oldState)\n\n      if (JSON.stringify(newSelected) !== JSON.stringify(oldState)) {\n        console.log('HolA!!!!!'); // Subscriber actions here == Update state!!\n\n        thiss.setState({ ...thiss.state\n        });\n      }\n    });\n    us.subscriptions.set(select, theSelected);\n    return theSelected;\n  }\n\n  useDispatch(...args) {\n    const reactComponentMethods = ['componentDidMount', 'componentWillMount', 'render', 'constructClassInstance'];\n    const st = this.getStackTrace();\n    const instance = st[0];\n    const prevInstance = args[1] || st[1];\n    let reactMethod;\n    st.some(s => {\n      console.log('s', s);\n      return reactComponentMethods.some(cm => {\n        if (s.includes('.' + cm)) {\n          reactMethod = cm;\n          return true;\n        }\n      });\n    });\n    console.log('react method!!!!', reactMethod);\n    previous.forEach((prev, ind) => previous[ind] = { ...prev\n    });\n    console.log('previous', previous);\n    console.log('instance!!!', instance);\n    console.log('previoussss', prevInstance);\n    const inLoop = this.inLoop();\n    console.log('in loop', inLoop);\n    console.log(this.getStackTrace());\n    console.log(instance);\n    const inPrevious = previous.some(prev => prev.arg === args[0].toString() && prev.instance === instance && prevInstance === prev.prevInstance && reactMethod === prev.reactMethod);\n    console.log('STATE', this.props);\n    console.log('THIS', this);\n    console.log('STORE', store.getState());\n\n    if (inLoop || inPrevious) {\n      console.log(previous);\n      return;\n      console.log('in loop', inLoop);\n      console.log('in previous', inPrevious);\n      console.log('yuuueeeeppp!!!!');\n    }\n\n    previous.push({\n      arg: args[0].toString(),\n      instance,\n      prevInstance,\n      reactMethod\n    });\n    console.log(inLoop);\n    this.suppressSetState = false;\n\n    if (this.dispatches && this.dispatches.key === args[0]) {\n      return;\n    }\n\n    this.wrapped = this.wrapped || [];\n\n    if (this.suppressDispatch === args[0]) {\n      this.suppressDispatch = false;\n      return;\n    }\n\n    try {\n      store.dispatch(args[0]);\n    } catch (err) {\n      console.log(err);\n    }\n\n    this.dispatches = {};\n    this.suppressSetState = true; // this.dispatching.splice(this.dispatching.indexOf(arguments[0]))\n  }\n\n  fetchData(name, endpoint, callback) {\n    console.log('----------fetchData!!!--------------');\n    this.useDispatch(this.actions.fetchData(endpoint, name, callback));\n  }\n\n  get reducer() {\n    const thiss = this;\n    let dispatches;\n    let suppressSetState = thiss.suppressSetState;\n\n    const reducerFunction = (state = thiss.state, action) => {\n      this.reducing = true;\n\n      if (this.dispatches) {\n        this.dispatches.value = action;\n        dispatches = this.dispatches;\n      }\n\n      console.log('in the reducer !!!!!!!');\n      console.log('constructor: ', this.constructor.name);\n      console.log('ACTION TYPE: ', action.type);\n      if (action.type === thiss.componentName.toUpperCase() + '_STATE_CHANGE') return { ...state,\n        ...action.payload\n      };else if (action.type === thiss.componentName.toUpperCase() + '_FETCH_DATA_START') return { ...state,\n        fetching: true\n      };else if (action.type === thiss.componentName.toUpperCase() + '_FETCH_DATA_COMPLETE') {\n        const callback = action.payload.callback;\n        delete action.payload.callback;\n\n        try {\n          const newState = { ...state,\n            fetching: false,\n            ...action.payload\n          };\n          console.log('setting state from FETCH_DATA_COMPLETE', newState);\n          return newState;\n        } finally {\n          if (typeof callback === 'function') {\n            callback(action.payload);\n          }\n        }\n      } else if (thiss.customReducer) return thiss.customReducer(state, action);\n      return state || Component.stateFromStorage(thiss.componentName) || null;\n    };\n\n    return (state = thiss.state, action) => {\n      if (this.dispatching) {\n        console.log('dispatching thing', this.dispatching);\n        console.log('dispatches things', this.dispatches.key);\n        console.log('--------------------------------');\n      }\n\n      console.log('REDUCER FUNCTION START!!!!');\n      console.log('original state');\n      const newState = reducerFunction(state, action);\n      console.log(\"REDUCER FUNCTION COMPLETE!!!!!\", newState);\n      console.log(\"EQUAL\", thiss.state === newState);\n      console.log('state', thiss.state, 'new', newState);\n      suppressSetState = newState === thiss.state || action.type.includes('@@') ? true : false;\n\n      if (dispatches) {\n        console.log('supress dispatch:');\n        thiss.suppressDispatch = dispatches.key;\n      }\n\n      if (!suppressSetState) {\n        console.log('NO SUPPRESS SETSTATE -- ORIGINAL SET STATE');\n        thiss.originalSetState(newState);\n      } else {\n        console.log('SETTING STATE SUPPRESSED!!!!!!');\n      } // thiss.originalSetState(newState,() => { throw new Error })\n\n\n      return newState;\n    };\n  }\n\n  getStackTrace() {\n    var obj = {};\n    Error.captureStackTrace(obj, this.getStackTrace);\n    let stackTrace = obj.stack.split(\"\\n    at \");\n    stackTrace.forEach((st, ind) => stackTrace[ind] = st.split(' (')[0].split('http://')[0].split('https://')[0]);\n    stackTrace.shift();\n    return stackTrace.filter(ti => ti !== \"\");\n  }\n\n  inLoop() {\n    const st = this.getStackTrace();\n    return st.filter((s, i) => i !== 0).includes(st[0]);\n  }\n\n  set reducer(newReducer) {\n    this.customReducer = newReducer;\n  }\n\n  static stateFromStorage(component) {\n    let storageState = localStorage.getItem('persist:root');\n\n    try {\n      storageState = storageState ? JSON.parse(storageState) : null;\n    } catch {\n      return {};\n    }\n\n    if (!storageState) return {};\n    let returnState = {};\n    Object.keys(storageState).forEach(item => {\n      try {\n        returnState[item] = JSON.parse(storageState[item]);\n      } catch {\n        returnState[item] = {};\n      }\n    });\n    if (component) return returnState[component];\n    return returnState;\n  }\n\n  static get reducer() {\n    console.log('hey', this);\n    let key = lowerFirst(this.name);\n    return (state = null, action) => {\n      switch (action.type) {\n        case key.toUpperCase() + '_STATE_CHANGE':\n          return action.payload;\n\n        default:\n          return state;\n      }\n    };\n  }\n\n  static addReducers(red) {\n    let comb = { ...combined,\n      ...red\n    };\n    store.replaceReducer(combineReducers({ ...comb\n    }));\n  }\n\n  static refreshReducers() {\n    store.replaceReducer(combineReducers({ ...combined,\n      ...Component.reducers\n    }));\n  }\n\n  static registerReducers(red) {\n    if (red) {\n      Component.reducers = red;\n      Component.customReducers = true;\n    } else {\n      Component.customReducers = false;\n    }\n\n    try {\n      Object.keys(Component.reducers).some(redu => {\n        if (!store.getState()[redu]) Component.refreshReducers();\n      });\n    } catch {}\n  }\n\n}\nComponent.statefulComponents = {};\nComponent.reducers = {};\nexport const Komponent = Com => {\n  class ByThing extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n      const msp = state => {\n        const ms = {\n          mapState: {}\n        };\n        Object.keys(state).forEach(st => ms.mapState[st] = state[st]);\n        return ms;\n      }; // let Connected = connect(msp)(Com)\n      // Object.defineProperty(Connected,'name',{ value: Com.name, writable:false})\n\n\n      return /*#__PURE__*/React.createElement(Component, Object.assign({\n        component: Com\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return ByThing;\n};","map":{"version":3,"sources":["/Users/TravelComputer/Desktop/node_sandbox/reactapp/node_modules/react-komponent/src/components/component.jsx"],"names":["React","store","combined","combinedReducers","combineReducers","useSelector","connect","lowerFirst","word","console","log","charAt","toLowerCase","slice","previous","Component","constructor","props","name","reducers","dispatch","componentName","originalSetState","setState","initialized","originalComponentDidMount","componentDidMount","thiss","component","stateFromStorage","getState","st","actions","payload","comp","type","toUpperCase","fetchData","endpoint","callback","fetchDataStart","fetch","then","response","json","fetchDataComplete","catch","error","data","customReducers","reducer","state","statefulComponents","fromLocal","fromStore","untracked","replenish","Object","keys","forEach","key","action","length","replaceReducer","useDispatch","args","cb","arguments","pop","suppressSetState","componentWillMount","storeState","fetchedState","JSON","stringify","registerReducers","theState","select","us","theSelected","subscriptions","WeakMap","has","subscribe","newStore","newSelected","oldState","get","set","reactComponentMethods","getStackTrace","instance","prevInstance","reactMethod","some","s","cm","includes","prev","ind","inLoop","inPrevious","arg","toString","push","dispatches","wrapped","suppressDispatch","err","reducerFunction","reducing","value","fetching","newState","customReducer","dispatching","obj","Error","captureStackTrace","stackTrace","stack","split","shift","filter","ti","i","newReducer","storageState","localStorage","getItem","parse","returnState","item","addReducers","red","comb","refreshReducers","redu","Komponent","Com","ByThing","render","msp","ms","mapState"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {store} from './componentFunction'\nimport {combined as combinedReducers} from '../reducers/index'\nimport {combineReducers} from 'redux'\nimport { useSelector } from 'react-redux'\nimport { connect } from 'react-redux'\n\nlet combined = combinedReducers\n\nfunction lowerFirst(word) {\n   console.log('word!',word)\n   return word.charAt(0).toLowerCase() + word.slice(1);\n}\n\nlet previous = []\n\nexport default class Component extends React.Component {\n    constructor(props) {\n        super(props)\n        console.log(\"in the constructor!!!!!!!!!!!!!!\",this.constructor.name)\n        let reducers = combined\n        const dispatch = store.dispatch\n        const componentName = this.constructor.name\n        this.componentName = lowerFirst(componentName)\n        this.originalSetState = this.setState\n        this.initialized = false\n        this.originalComponentDidMount = this.componentDidMount\n        const thiss = this; \n        let component = this.props.component\n\n        const stateFromStorage = Component.stateFromStorage\n\n        const getState = () => store.getState()\n\n        if (props.st) { \n           console.log('propsST',props.st)\n        }\n\n        this.actions = { \n            setState: (payload,comp=this.componentName) => {\n                const type = comp.toUpperCase()+'_STATE_CHANGE'\n                return {\n                    type: type,\n                    payload\n                }\n            },\n            fetchData: (endpoint,name='fetchedData',callback,comp=thiss.componentName) => {\n               return (dispatch) => {\n                  dispatch(thiss.actions.fetchDataStart(comp))\n                  console.log('endpoint',endpoint);\n                  fetch(endpoint)\n                     .then((response) => response.json())\n                     .then((json) => { \n                        console.log('JSON:',json)\n                        dispatch(thiss.actions.fetchDataComplete(json,callback,name))\n                     })\n                     .catch(error => console.log(error))\n               }\n            },\n            fetchDataStart: (comp=thiss.componentName) => {  \n               return { type: comp.toUpperCase()+'_FETCH_DATA_START' }\n            },\n            fetchDataComplete: (data, callback=null, name='fetchedData', comp=thiss.componentName) => {\n               return { type: comp.toUpperCase()+'_FETCH_DATA_COMPLETE', payload: { [name]: data, callback } }\n            }\n        }\n\n        if (!Component.customReducers)\n           Component.reducers[this.componentName] = this.reducer\n\n        if (thiss.state && !Component.statefulComponents[thiss.componentName])\n            Component.statefulComponents[thiss.componentName] = thiss\n\n        let fromLocal = stateFromStorage(); let fromStore = getState()\n\n        let untracked = {}; let replenish = {}\n        Object.keys(fromLocal).forEach(key => {\n           if (!fromStore[key]) replenish[key] = fromLocal[key]\n           if (!fromStore[key] && !Component.reducers[key]) {\n              console.log('got one',key,fromLocal[key])\n              untracked[key] = (state=null, action) => {\n                 switch(action.type) {\n                    case key.toUpperCase()+'_STATE_CHANGE':\n                       return action.payload\n                    default:\n                       return state\n                 }\n              }\n           }\n        })\n        \n        if (Object.keys(untracked).length > 1) {\n           console.log('untracked!', untracked)\n           combined = { ...combined, ...untracked }\n           store.replaceReducer(combineReducers({ ...combined, ...Component.reducers }))\n           console.log('store from untracked:',store.getState())\n        }\n\n        Object.keys(replenish).forEach(key => {\n           this.useDispatch(this.actions.setState(stateFromStorage()[key],key))\n        })\n        \n        this.setState = function(...args) {\n           let cb = () => {}\n           if (arguments.length === 2 && typeof arguments[1] === 'function') {\n               cb = args.pop()\n           }\n           // console.log('before',getState())\n           thiss.originalSetState(arguments[0],(st) => {\n               cb(st)\n               thiss.suppressSetState = false\n               console.log('doing the thing!!!!')\n               this.useDispatch(thiss.actions.setState(arguments[0]))\n               // console.log('New State from setState',getState())\n               console.log('New State from setState',thiss.state)\n           })\n        }\n\n        this.componentWillMount = (...args) => {\n            console.log('------------- component WILL mount!!!! -------------')\n            if (!thiss.initialized && thiss.state && Object.keys(thiss.state).length > 1) {\n               const storeState = getState()[thiss.componentName] || {}\n               const fetchedState = (Object.keys(storeState).length < 1) ? thiss.state : storeState\n               if (JSON.stringify(thiss.state) !== JSON.stringify(storeState)) {\n                  thiss.setState(fetchedState)\n               }\n            }\n            thiss.initialized = true\n\n            if (thiss.originalComponentDidMount)\n               thiss.originalComponentDidMount(...args)\n            \n        }\n\n        if (!reducers[thiss.componentName] && Component.reducers[thiss.componentName])\n           Component.registerReducers()\n\n    } \n    \n    useSelector(cb) { \n       const theState = store.getState()\n       const thiss = this\n       const select = cb\n       const us = this.useSelector\n       const theSelected = select(theState)\n\n       if (!us.subscriptions)\n          us.subscriptions = new WeakMap\n\n       if (us.subscriptions.has(select)) {\n          return theSelected\n       }\n\n       if (theState === theSelected || theSelected === theState[this.componentName])\n          return theSelected\n\n       // return theState\n\n       store.subscribe(state => {\n\n         let newStore = store.getState()\n         let newSelected = select(newStore)\n\n         // console.log('NEWSTORE FROM SUBSCRIBE',newStore)\n\n         let oldState = newSelected\n\n         if (us.subscriptions.has(select))\n            oldState = us.subscriptions.get(select)\n\n         // console.log(\"NEW STATE from Subscribe\",newSelected); console.log(\"OLD STATE from Subscribe\",oldState)\n        \n          if (JSON.stringify(newSelected) !== JSON.stringify(oldState)) {\n             console.log('HolA!!!!!')\n             // Subscriber actions here == Update state!!\n             thiss.setState({ ...thiss.state })\n          }\n       })\n       us.subscriptions.set(select,theSelected)\n       return theSelected\n    }\n\n    useDispatch(...args) {\n\n      const reactComponentMethods = [\n         'componentDidMount',\n         'componentWillMount',\n         'render',\n         'constructClassInstance'\n      ]\n\n       const st = this.getStackTrace()\n       const instance = st[0]\n       const prevInstance = args[1] || st[1]\n       let reactMethod\n       st.some(s => {\n         console.log('s',s)\n         return reactComponentMethods.some(cm => {\n            if (s.includes('.'+cm)) {\n              reactMethod = cm\n              return true\n            }\n         })\n      })\n       console.log('react method!!!!',reactMethod)\n       previous.forEach((prev,ind) => previous[ind] = {...prev})\n       console.log('previous',previous)\n       console.log('instance!!!',instance)\n       console.log('previoussss',prevInstance)\n       const inLoop = this.inLoop()\n       console.log('in loop',inLoop)\n       console.log(this.getStackTrace())\n       console.log(instance)\n\n       const inPrevious = previous.some(prev => (prev.arg === args[0].toString()) && (prev.instance === instance) && (prevInstance === prev.prevInstance) && (reactMethod === prev.reactMethod))\n       console.log('STATE',this.props)\n       console.log('THIS',this)\n       console.log('STORE',store.getState())\n       if (inLoop || inPrevious) {\n          console.log(previous)\n          return\n          console.log('in loop',inLoop)\n          console.log('in previous',inPrevious)\n          console.log('yuuueeeeppp!!!!')\n       }\n\n       previous.push({ arg:args[0].toString(), instance, prevInstance, reactMethod })\n       console.log(inLoop);\n\n\n      this.suppressSetState = false\n\n      if (this.dispatches && this.dispatches.key === args[0]) {\n         return\n      }\n\n      this.wrapped = this.wrapped || []\n\n      if (this.suppressDispatch === args[0]) {\n         this.suppressDispatch = false\n         return\n      }\n       \n       try { store.dispatch(args[0]) } catch(err) { console.log(err); }\n       \n       this.dispatches = {}\n       this.suppressSetState = true\n\n       // this.dispatching.splice(this.dispatching.indexOf(arguments[0]))\n    }\n\n    fetchData(name,endpoint,callback) {\n       console.log('----------fetchData!!!--------------')\n       this.useDispatch(this.actions.fetchData(endpoint,name,callback))\n    }\n\n    get reducer() {\n       const thiss = this\n       let dispatches\n       let suppressSetState = thiss.suppressSetState\n       const reducerFunction = (state=thiss.state,action) => { \n\n\n          this.reducing = true\n          if (this.dispatches) {\n             this.dispatches.value = action\n             dispatches = this.dispatches\n          }\n          console.log('in the reducer !!!!!!!')\n          console.log('constructor: ',this.constructor.name)\n          console.log('ACTION TYPE: ',action.type)\n\n\n          if (action.type === thiss.componentName.toUpperCase()+'_STATE_CHANGE') \n             return { ...state, ...action.payload }\n          else if (action.type === thiss.componentName.toUpperCase()+'_FETCH_DATA_START')\n             return { ...state, fetching:true }\n          else if (action.type === thiss.componentName.toUpperCase()+'_FETCH_DATA_COMPLETE') {\n             const callback = action.payload.callback; delete action.payload.callback\n             try { \n                const newState = { ...state, fetching:false, ...action.payload } \n                console.log('setting state from FETCH_DATA_COMPLETE',newState)\n                return newState\n             } finally { \n                if (typeof callback === 'function') {\n                   callback(action.payload)\n                } \n             }\n          }\n          else if (thiss.customReducer)\n             return thiss.customReducer(state,action)\n          return state || Component.stateFromStorage(thiss.componentName) || null\n        } \n\n        return (state=thiss.state,action) => {\n           if (this.dispatching) {\n              console.log('dispatching thing',this.dispatching)\n              console.log('dispatches things',this.dispatches.key)\n              console.log('--------------------------------')\n           }\n           console.log('REDUCER FUNCTION START!!!!')\n           console.log('original state')\n           const newState = reducerFunction(state,action)\n           console.log(\"REDUCER FUNCTION COMPLETE!!!!!\",newState)\n           console.log(\"EQUAL\", thiss.state === newState)\n           console.log('state',thiss.state, 'new',newState)\n\n           suppressSetState = ((newState === thiss.state) || (action.type.includes('@@'))) ? true : false\n\n\n           if (dispatches) {\n              console.log('supress dispatch:')\n              thiss.suppressDispatch = dispatches.key\n           }\n           if (!suppressSetState) {\n              console.log('NO SUPPRESS SETSTATE -- ORIGINAL SET STATE')\n              thiss.originalSetState(newState)\n           } else {\n              console.log('SETTING STATE SUPPRESSED!!!!!!')\n           }\n           // thiss.originalSetState(newState,() => { throw new Error })\n           return newState\n        }     \n    }\n\n    getStackTrace() {\n      var obj = {};\n      Error.captureStackTrace(obj, this.getStackTrace);\n      let stackTrace = obj.stack.split(\"\\n    at \")\n      stackTrace.forEach((st,ind) => stackTrace[ind] = st.split(' (')[0].split('http://')[0].split('https://')[0])\n      stackTrace.shift()\n      return stackTrace.filter(ti => ti !== \"\")\n   }\n\n   inLoop() { \n      const st = this.getStackTrace()\n      return st.filter((s,i) => i !== 0).includes(st[0]) \n   }\n\n    set reducer(newReducer) {\n       this.customReducer = newReducer\n    }\n\n    static stateFromStorage(component) {\n        let storageState = localStorage.getItem('persist:root')\n        try {\n            storageState = storageState ? JSON.parse(storageState) : null\n        } catch { return {} }\n\n        if (!storageState) return {}\n        \n        let returnState = {}\n        Object.keys(storageState).forEach(item => { \n            try {\n                returnState[item] = JSON.parse(storageState[item])\n            } catch { returnState[item] = {} }\n        })  \n        if (component) return returnState[component]\n        return returnState        \n    }\n    static statefulComponents = {}\n    static reducers = {}\n    static get reducer() {\n       console.log('hey',this)\n       let key = lowerFirst(this.name)\n       return (state=null, action) => {\n         switch(action.type) {\n            case key.toUpperCase()+'_STATE_CHANGE':\n               return action.payload\n            default:\n               return state\n         }\n       }\n    }\n    \n    static addReducers(red) {\n        let comb = { ...combined, ...red }\n        store.replaceReducer(combineReducers({ ...comb }))\n    }\n    static refreshReducers() {\n       store.replaceReducer(combineReducers({ ...combined, ...Component.reducers }))\n    }\n    static registerReducers(red) {\n       if (red) {\n           Component.reducers = red\n           Component.customReducers = true\n       } else {\n           Component.customReducers = false\n       }\n       try {\n         Object.keys(Component.reducers).some(redu => {\n            if (!store.getState()[redu])\n               Component.refreshReducers()\n         })\n       } catch {}\n    }\n}\n\nexport const Komponent = (Com) => {\n\n   class ByThing extends React.Component {\n      constructor(props) {\n         super(props)\n      }\n      render() {\n         const msp = (state) => {\n            const ms = { mapState: {} }\n            Object.keys(state).forEach(st => ms.mapState[st] = state[st])\n            return ms\n         }\n         // let Connected = connect(msp)(Com)\n         // Object.defineProperty(Connected,'name',{ value: Com.name, writable:false})\n         return <Component component={Com} {...this.props}></Component>\n      }\n   }\n   return ByThing\n   \n}\n"]},"metadata":{},"sourceType":"module"}